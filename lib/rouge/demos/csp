{-
 This is a multiline comment.
-}

-- Single comment preceding a type and channel declarations.
nametype core_real = {0..1}
channel in, out : core_real
channel output : Int

-- A definition
x = "a string"

y = set(<1,2>)

Buffer = in?x -> BufferOne(x)
BufferOne(x) = out!x -> Buffer [] Buffer

-- A memory cell
channel getV, setV : core_real

Mem(x) = setV?x -> Mem(x) [] get!x -> Mem(x)

BufferMem = (Mem(0) [| {| getV, setV |} |] Operator) \ {|getV,setV|}

Operator = getV?x -> (in?x -> setV!x -> Operator 
                      []
                      out!x -> Operator)

assert BufferMem [FD= Operator

-- generate intensity not
intensity(<>) = 0
intensity(<(c,i)>^xs) = let
n = intensity(xs)
within if (n > i) then n else i

-- generate location not
--location :: (<Chem.Intensity>) -> real
location(gs) = let
find(<>,_) = 0
    find(<(c,i)>^xs,n) = if (i == intensity(gs)) then n else find(xs,n+1)
within
if (length(gs) > 0) then (360/length(gs))*find(gs,0) else 0

-- generate analysis not
analysis(gs) = if (intensity(gs) > 0) then gasD else noGas

-- generate greater not
greater(i1,i2) = i1 > i2

-- generate Angle not
nametype Angle = {0,180}

external prioritise
external dbisim
external sbisim

assert P :[deterministic]
assert P :[deadlock free]
assert P :[deadlock-free]
assert P :[divergence-free]
assert P :[divergence free]
assert P :[has trace]: <a,e>